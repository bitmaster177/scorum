# Endpoint for P2P node to listen on
p2p-endpoint = 0.0.0.0:2001

# Maxmimum number of incoming connections on P2P endpoint
# p2p-max-connections = 

# P2P nodes to connect to on startup (may specify multiple times)
# seed-node = 

# Pairs of [BLOCK_NUM,BLOCK_ID] that should be enforced as checkpoints.
# checkpoint = 

# Directory containing databases, configuration file, etc.
data-dir = "witness_node_data_dir"

# Location of the shared memory file. Defaults to data_dir/blockchain
# shared-file-dir = 

# Size of the shared memory file. Default: 20G
shared-file-size = 20G

# Endpoint for websocket RPC to listen on
rpc-endpoint = 0.0.0.0:8090

# Endpoint for TLS websocket RPC to listen on
# rpc-tls-endpoint = 

# Endpoint to forward write API calls to for a read node
# read-forward-rpc = 

# The TLS certificate file for this server
# server-pem = 

# Password for this certificate
# server-pem-password = 

# API user specification, may be specified multiple times
# api-user = 

# Set an API to be publicly available, may be specified multiple times
public-api = database_api login_api account_by_key_api blockchain_history_api account_history_api account_statistic_api blockchain_statistics_api

# Plugin(s) to enable, may be specified multiple times
enable-plugin = blockchain_history account_by_key account_statistics blockchain_monitoring

# Maximum age of head block when broadcasting tx via API
max-block-age = 200

# Flush shared memory file to disk this many blocks
flush = 100000

# File to read genesis state from
# genesis-json = 

# Rebuild object graph by replaying all blocks
# replay-blockchain = 

# Skip witness schedule check wile block replaying
# replay-skip-witness-schedule-check = true

# Delete all blocks and re-sync with network from scratch
# resync-blockchain = 

# Force validation of all transactions
# force-validate = 

# Node will not connect to p2p network and can only read from the chain state
# read-only = 

# Check correctness of chainbase locking
# check-locks = 

# Disable get_block API call
# disable-get-block = 

# Defines a range of accounts to track as a json pair ["from","to"] [from,to] Can be specified multiple times
# track-account-range = 

# Defines a list of operations which will be explicitly logged.
# history-whitelist-ops = 

# Defines a list of operations which will be explicitly ignored.
# history-blacklist-ops = 

# Track account statistics by grouping orders into buckets of equal size measured in seconds specified as a JSON array of numbers
account-stats-bucket-size = [60,3600,21600,86400,604800,2592000]

# How far back in time to track history for each bucker size, measured in the number of buckets (default: 100)
account-stats-history-per-bucket = 100

# Which accounts to track the statistics of. Empty list tracks all accounts.
account-stats-tracked-accounts = []

# Track blockchain statistics by grouping orders into buckets of equal size measured in seconds specified as a JSON array of numbers
chain-stats-bucket-size = [60,3600,21600,86400,604800,2592000]

# How far back in time to track history for each bucket size, measured in the number of buckets (default: 100)
chain-stats-history-per-bucket = 100

# RPC endpoint of a trusted validating node (required)
# trusted-node = 

# Enable block production, even if the chain is stale.
enable-stale-production = false

# Percent of witnesses (0-99) that must be participating in order to produce blocks
required-participation = false

# name of witness controlled by this node (e.g. initwitness )
# witness = 

# WIF PRIVATE KEY to be used by one or more witnesses or miners
# private-key = 

# Console appender definition json: {"appender", "stream"}
# File appender definition json:  {"appender", "stream", "rotation_interval_minutes", "rotation_limit_hours"}
# Gelf appender definition json:  {"appender", "stream", "host_name", "additional_info"}
log-appender = {"appender":"stderr","stream":"std_error"}
log-appender = {"appender":"p2p","stream":"logs/p2p.log","rotation_interval_minutes":"120", "rotation_limit_hours":"720"}
log-appender = {"appender":"node","stream":"logs/node.log","rotation_interval_minutes":"120", "rotation_limit_hours":"720"}
log-appender = {"appender":"remote","stream":"127.0.0.1:12201", "host_name":"", "additional_info":""}

# Logger definition json: {"name", "level", "appender"}
log-logger = {"name":"default","level":"info","appender":"stderr, node"}
log-logger = {"name":"p2p","level":"info","appender":"p2p"}